#!/usr/bin/env ruby
require 'optparse'
require_relative 'lib/build_inspector'
require_relative 'lib/configuration'
require_relative 'lib/evidence_collector'
require_relative 'lib/evidence_processor'
require_relative 'lib/printer'
require_relative 'lib/vagrant_whisperer'

# Don't buffer output; flush it immediately.
$stdout.sync = true

options = {
  rollback: true,
  config: 'config.yml',
  branch: 'master',
  only_process: nil,
  is_url: false,
  verbose: false,
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage #{File.basename($0)} [options] <git repo path>"
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('-n', '--no-rollback',
          'Do not roll back the virtual machine state after running') do
    options[:rollback] = false
  end

  opts.on('-v', '--verbose', 'Be verbose') do
    options[:verbose] = true
  end

  opts.on('-c', '--config <PATH>', String,
          "Use configuration file at <PATH>, default=#{options[:config]}") do |config|
    options[:config] = config
  end

  opts.on('-p', '--process <PATH>', String,
          "Only process evidence at <PATH>") do |evidence_path|
    options[:only_process] = evidence_path
  end

  opts.on('-b', '--branch <BRANCH>', String,
          "Clone <BRANCH> from repository URL") do |branch|
    options[:branch] = branch
  end

  opts.on('--url', String, "Git repo path is a URL") do
    options[:is_url] = true
  end

  opts.on('--gem', String, "Perform a GEM based build") do |type|
    options[:config] = 'configs/bundler.yml'
  end

  opts.on('--gradle', String, "Perform a Gradle based build") do |type|
    options[:config] = 'configs/gradle.yml'
  end

  opts.on('--maven', String, "Perform a Maven based build") do |type|
    options[:config] = 'configs/maven.yml'
  end

  opts.on('--npm', String, "Perform a NPM based build") do |type|
    options[:config] = 'configs/npm.yml'
  end
end
optparse.parse!

def process_evidence(evidence_path, ip_address, host_whitelist)
  processor = EvidenceProcessor.new(evidence_path: evidence_path, vagrant_ip: ip_address,
                                    host_whitelist: host_whitelist)
  processor.process
end

whisperer = VagrantWhisperer.new(verbose: options[:verbose])
config = Configuration.new(options[:config])

if options[:only_process]
  evidence_path = options[:only_process]
  process_evidence(evidence_path, whisperer.ip_address, config.host_whitelist)
  exit 0
end

if ARGV.size < 1
  puts 'Must specifiy a repository URL'
  puts optparse.help
  exit -1
end

start_time = Time.now

whisperer.up

repo_path = ARGV.first
repo_name = nil
if options[:is_url]
  repo_name = repo_path.split('/').last.chomp('.git')
else
  repo_name = File.basename(repo_path)
  unless File.exists?(repo_path)
    puts "The repo path #{repo_path} does not exist. Did you mean to use --url ?"
    exit -1
  end
end

inspector = BuildInspector.new(
  whisperer: whisperer, repo_path: repo_path,
  is_url: options[:is_url], repo_branch: options[:branch],
  commands: config.commands, evidence_files: config.evidence_files
)


whisperer.snapshot
inspector.inspect

evidence_name = "evidence-#{repo_name}-#{Time.now.strftime('%Y%m%d%H%M%S')}"
collector = EvidenceCollector.new(whisperer: whisperer, evidence_name: evidence_name)
puts Printer.yellowify('Collecting evidence ...')
collector.collect
whisperer.rollback if options[:rollback]

process_evidence(evidence_name, whisperer.ip_address, config.host_whitelist)

total_time = Time.now - start_time
puts Printer.yellowify("Finished inspecting build after #{total_time} seconds")
