#!/usr/bin/env ruby
require 'optparse'
require_relative 'lib/build_inspector'
require_relative 'lib/configuration'
require_relative 'lib/evidence_collector'
require_relative 'lib/evidence_processor'
require_relative 'lib/printer'
require_relative 'lib/vagrant_whisperer'

# Don't buffer output; flush it immediately.
$stdout.sync = true

options = {
  rollback: true,
  config: 'config.yml',
  only_process: nil,
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage #{File.basename($0)} [options] <git repo URL>"
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('-n', '--no-rollback',
          'Do not roll back the virtual machine state after running') do
    options[:rollback] = false
  end

  opts.on('-c', '--config <PATH>', String,
          "Use configuration file at <PATH>, default=#{options[:config]}") do |config|
    options[:config] = config
  end

  opts.on('-p', '--process <PATH>', String,
          "Only process evidence at <PATH>") do |evidence_path|
    options[:only_process] = evidence_path
  end
end
optparse.parse!

def process_evidence(evidence_path, ip_address, host_whitelist)
  processor = EvidenceProcessor.new(evidence_path: evidence_path, vagrant_ip: ip_address,
                                    host_whitelist: host_whitelist)
  processor.process
end

whisperer = VagrantWhisperer.new
config = Configuration.new(options[:config])

if options[:only_process]
  evidence_path = options[:only_process]
  process_evidence(evidence_path, whisperer.ip_address, config.host_whitelist)
  exit(0)
end

if ARGV.size < 1
  puts 'Must specifiy a repository URL'
  puts optparse.help
  exit(-1)
end

repo_url = ARGV.first
inspector = BuildInspector.new(whisperer: whisperer, repo_url: repo_url,
                               commands: config.commands, evidence_files: config.evidence_files)

whisperer.snapshot

inspector.inspect

repo_url = ARGV.first
repo_name = repo_url.split('/').last.chomp('.git')
evidence_name = "evidence-#{repo_name}-#{Time.now.strftime('%Y%m%d%H%M%S')}"
collector = EvidenceCollector.new(whisperer: whisperer, evidence_name: evidence_name)
puts Printer.yellowify('Collecting evidence ...')
collector.collect

whisperer.rollback if options[:rollback]

process_evidence(evidence_name, whisperer.ip_address, config.host_whitelist)
